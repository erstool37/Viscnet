import json
import os.path as osp
import glob
import math
import numpy as np
import torch
from utils import loginterscaler, loginterdescaler, interscaler, interdescaler, zscaler, zdescaler, logzscaler, logzdescaler

# Start normalizing
DATA_ROOT = "../../dataset/CFDfluid"
PARA_SUBDIR = "parameters"
NORM_SUBDIR = "parametersNorm"
para_paths = sorted(glob.glob(osp.join(DATA_ROOT, PARA_SUBDIR, "*.json")))
norm_path = osp.join(DATA_ROOT, NORM_SUBDIR)

dynVisc = []
kinVisc = [] 
surfT = []
density = []

for path in para_paths:
    with open(path, 'r') as file:
        data = json.load(file)
        dynVisc.append(data["dynamic_viscosity"])
        kinVisc.append(data["kinematic_viscosity"])
        surfT.append(data["surface_tension"])
        density.append(data["density"])

# normalize/store stats for MAXMIN normalizing
dynViscnorm, maxdynVisc, mindynVisc = logscaler(dynVisc)
kinViscnorm, maxkinVisc, minkinVisc = logscaler(kinVisc)
surfTnorm, maxsurfT, minsurfT = logscaler(surfT)
densitynorm, maxdensity, mindensity = logscaler(density)

stats = {
    "dynamic_viscosity": {"max": maxdynVisc, "min": mindynVisc},
    "kinematic_viscosity": {"max": maxkinVisc,"min": minkinVisc},
    "surface_tension": {"max": maxsurfT,"min": minsurfT},
    "density": {"max": maxdensity,"min": mindensity}
}

# normalize/store stats for zscore-normalizing
"""
dynViscnorm, meandynVisc, stddynVisc = zscaler(dynVisc)
kinViscnorm, meankinVisc, stdkinVisc = zscaler(kinVisc)
surfTnorm, meansurfT, stdsurfT = zscaler(surfT)
densitynorm, meandensity, stddensity = zscaler(density)

stats = {
    "dynamic_viscosity": {"mean": meandynVisc, "std": stddynVisc},
    "kinematic_viscosity": {"mean": meankinVisc,"std": stdkinVisc},
    "surface_tension": {"mean": meansurfT,"std": stdsurfT},
    "density": {"mean": meandensity,"std": stddensity}
}
"""

# store normalized data
for idx in range(len(dynViscnorm)):
    data = {"dynamic_viscosity": dynViscnorm[idx], "kinematic_viscosity": kinViscnorm[idx], "surface_tension": surfTnorm[idx],  "density": densitynorm[idx]}
    with open(f'{norm_path}/config_{(idx+1):04d}.json', 'w') as file:
        json.dump(data, file, indent=4)

with open(f'{norm_path}/../statistics.json', 'w') as file:
    json.dump(stats, file, indent=4)